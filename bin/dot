#!/usr/bin/env bash

set -euo pipefail

source "$DOTFILES_PATH/scripts/core/_main.sh"

##? Execute all scripts inside this dotfiles. Inspired by denisidoro/dotfiles.
#?? 1.0.0
##?
##? Usage:
##?    dot
##?    dot <context>
##?    dot <context> <cmd> [<args>...]

list_command_paths() {

  if [ -z ${DOTFILES_PATHS+x} ]; then
    find "$DOTFILES_PATH/scripts" -maxdepth 2 -perm +111 -type f |
      grep -v core |
      sort
  else
    read -r -a dotfilesLocations <<< "$DOTFILES_PATHS"
    scriptsLocations=$(printf "%s/scripts " "${dotfilesLocations[@]}")
    find ${scriptsLocations} -maxdepth 2 -perm +111 -type f |
      grep -v core |
      sort
  fi
}

fzf_prompt() {
  local paths="$1"

  match="$(echo "$paths" |
    awk -F"/" '{print $(NF-1) " " $NF}' |
    fzf --height 100% --preview 'dot $(echo {} | cut -d" " -f 1) $(echo {} | cut -d" " -f 2) -h | bat --style=numbers')"
  printf "$match "
  read args
  if coll::is_empty "$args"; then
    dot $match
  else
    dot $match "$args"
  fi
}

if args::has_no_args "$@"; then
  fzf_prompt "$(list_command_paths)"
elif args::total_is 1 "$@"; then
  fzf_prompt "$(list_command_paths | grep "/$1/")"
else
  context="$1"
  command="$2"

  shift 2
  export DOT_TRACE=${TRACE:-false}

#  for dotfilesPath in ${DOTFILES_PATHS}; do
#    if [ -f ${dotfilesPath}/scripts/${context}/${command} ]; then
#      executable="${dotfilesPath}/scripts/${context}/${command}"
#    fi
#  done

  "$DOTFILES_PATH/scripts/${context}/${command}" "$@"
fi
